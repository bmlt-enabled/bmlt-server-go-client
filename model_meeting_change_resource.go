/*
BMLT

BMLT Admin API Documentation

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bmlt

import (
	"encoding/json"
)

// checks if the MeetingChangeResource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MeetingChangeResource{}

// MeetingChangeResource struct for MeetingChangeResource
type MeetingChangeResource struct {
	// Human-readable date and time.
	DateString *string `json:"dateString,omitempty"`
	// Name of the user who made the change.
	UserName *string `json:"userName,omitempty"`
	// Name of the service body related to the meeting.
	ServiceBodyName *string `json:"serviceBodyName,omitempty"`
	// List of details about the changes.
	Details []string `json:"details,omitempty"`
}

// NewMeetingChangeResource instantiates a new MeetingChangeResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMeetingChangeResource() *MeetingChangeResource {
	this := MeetingChangeResource{}
	return &this
}

// NewMeetingChangeResourceWithDefaults instantiates a new MeetingChangeResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMeetingChangeResourceWithDefaults() *MeetingChangeResource {
	this := MeetingChangeResource{}
	return &this
}

// GetDateString returns the DateString field value if set, zero value otherwise.
func (o *MeetingChangeResource) GetDateString() string {
	if o == nil || IsNil(o.DateString) {
		var ret string
		return ret
	}
	return *o.DateString
}

// GetDateStringOk returns a tuple with the DateString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeetingChangeResource) GetDateStringOk() (*string, bool) {
	if o == nil || IsNil(o.DateString) {
		return nil, false
	}
	return o.DateString, true
}

// HasDateString returns a boolean if a field has been set.
func (o *MeetingChangeResource) HasDateString() bool {
	if o != nil && !IsNil(o.DateString) {
		return true
	}

	return false
}

// SetDateString gets a reference to the given string and assigns it to the DateString field.
func (o *MeetingChangeResource) SetDateString(v string) {
	o.DateString = &v
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *MeetingChangeResource) GetUserName() string {
	if o == nil || IsNil(o.UserName) {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeetingChangeResource) GetUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.UserName) {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *MeetingChangeResource) HasUserName() bool {
	if o != nil && !IsNil(o.UserName) {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *MeetingChangeResource) SetUserName(v string) {
	o.UserName = &v
}

// GetServiceBodyName returns the ServiceBodyName field value if set, zero value otherwise.
func (o *MeetingChangeResource) GetServiceBodyName() string {
	if o == nil || IsNil(o.ServiceBodyName) {
		var ret string
		return ret
	}
	return *o.ServiceBodyName
}

// GetServiceBodyNameOk returns a tuple with the ServiceBodyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeetingChangeResource) GetServiceBodyNameOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceBodyName) {
		return nil, false
	}
	return o.ServiceBodyName, true
}

// HasServiceBodyName returns a boolean if a field has been set.
func (o *MeetingChangeResource) HasServiceBodyName() bool {
	if o != nil && !IsNil(o.ServiceBodyName) {
		return true
	}

	return false
}

// SetServiceBodyName gets a reference to the given string and assigns it to the ServiceBodyName field.
func (o *MeetingChangeResource) SetServiceBodyName(v string) {
	o.ServiceBodyName = &v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *MeetingChangeResource) GetDetails() []string {
	if o == nil || IsNil(o.Details) {
		var ret []string
		return ret
	}
	return o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeetingChangeResource) GetDetailsOk() ([]string, bool) {
	if o == nil || IsNil(o.Details) {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *MeetingChangeResource) HasDetails() bool {
	if o != nil && !IsNil(o.Details) {
		return true
	}

	return false
}

// SetDetails gets a reference to the given []string and assigns it to the Details field.
func (o *MeetingChangeResource) SetDetails(v []string) {
	o.Details = v
}

func (o MeetingChangeResource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MeetingChangeResource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DateString) {
		toSerialize["dateString"] = o.DateString
	}
	if !IsNil(o.UserName) {
		toSerialize["userName"] = o.UserName
	}
	if !IsNil(o.ServiceBodyName) {
		toSerialize["serviceBodyName"] = o.ServiceBodyName
	}
	if !IsNil(o.Details) {
		toSerialize["details"] = o.Details
	}
	return toSerialize, nil
}

type NullableMeetingChangeResource struct {
	value *MeetingChangeResource
	isSet bool
}

func (v NullableMeetingChangeResource) Get() *MeetingChangeResource {
	return v.value
}

func (v *NullableMeetingChangeResource) Set(val *MeetingChangeResource) {
	v.value = val
	v.isSet = true
}

func (v NullableMeetingChangeResource) IsSet() bool {
	return v.isSet
}

func (v *NullableMeetingChangeResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMeetingChangeResource(val *MeetingChangeResource) *NullableMeetingChangeResource {
	return &NullableMeetingChangeResource{value: val, isSet: true}
}

func (v NullableMeetingChangeResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMeetingChangeResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


