/*
BMLT

BMLT Admin API Documentation

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bmlt

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the RootServer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RootServer{}

// RootServer struct for RootServer
type RootServer struct {
	SourceId int32 `json:"sourceId"`
	Name string `json:"name"`
	Url string `json:"url"`
	Statistics *RootServerBaseStatistics `json:"statistics,omitempty"`
	ServerInfo *string `json:"serverInfo,omitempty"`
	LastSuccessfulImport time.Time `json:"lastSuccessfulImport"`
	Id int32 `json:"id"`
}

type _RootServer RootServer

// NewRootServer instantiates a new RootServer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRootServer(sourceId int32, name string, url string, lastSuccessfulImport time.Time, id int32) *RootServer {
	this := RootServer{}
	this.SourceId = sourceId
	this.Name = name
	this.Url = url
	this.LastSuccessfulImport = lastSuccessfulImport
	this.Id = id
	return &this
}

// NewRootServerWithDefaults instantiates a new RootServer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRootServerWithDefaults() *RootServer {
	this := RootServer{}
	return &this
}

// GetSourceId returns the SourceId field value
func (o *RootServer) GetSourceId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SourceId
}

// GetSourceIdOk returns a tuple with the SourceId field value
// and a boolean to check if the value has been set.
func (o *RootServer) GetSourceIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceId, true
}

// SetSourceId sets field value
func (o *RootServer) SetSourceId(v int32) {
	o.SourceId = v
}

// GetName returns the Name field value
func (o *RootServer) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RootServer) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RootServer) SetName(v string) {
	o.Name = v
}

// GetUrl returns the Url field value
func (o *RootServer) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *RootServer) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *RootServer) SetUrl(v string) {
	o.Url = v
}

// GetStatistics returns the Statistics field value if set, zero value otherwise.
func (o *RootServer) GetStatistics() RootServerBaseStatistics {
	if o == nil || IsNil(o.Statistics) {
		var ret RootServerBaseStatistics
		return ret
	}
	return *o.Statistics
}

// GetStatisticsOk returns a tuple with the Statistics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RootServer) GetStatisticsOk() (*RootServerBaseStatistics, bool) {
	if o == nil || IsNil(o.Statistics) {
		return nil, false
	}
	return o.Statistics, true
}

// HasStatistics returns a boolean if a field has been set.
func (o *RootServer) HasStatistics() bool {
	if o != nil && !IsNil(o.Statistics) {
		return true
	}

	return false
}

// SetStatistics gets a reference to the given RootServerBaseStatistics and assigns it to the Statistics field.
func (o *RootServer) SetStatistics(v RootServerBaseStatistics) {
	o.Statistics = &v
}

// GetServerInfo returns the ServerInfo field value if set, zero value otherwise.
func (o *RootServer) GetServerInfo() string {
	if o == nil || IsNil(o.ServerInfo) {
		var ret string
		return ret
	}
	return *o.ServerInfo
}

// GetServerInfoOk returns a tuple with the ServerInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RootServer) GetServerInfoOk() (*string, bool) {
	if o == nil || IsNil(o.ServerInfo) {
		return nil, false
	}
	return o.ServerInfo, true
}

// HasServerInfo returns a boolean if a field has been set.
func (o *RootServer) HasServerInfo() bool {
	if o != nil && !IsNil(o.ServerInfo) {
		return true
	}

	return false
}

// SetServerInfo gets a reference to the given string and assigns it to the ServerInfo field.
func (o *RootServer) SetServerInfo(v string) {
	o.ServerInfo = &v
}

// GetLastSuccessfulImport returns the LastSuccessfulImport field value
func (o *RootServer) GetLastSuccessfulImport() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.LastSuccessfulImport
}

// GetLastSuccessfulImportOk returns a tuple with the LastSuccessfulImport field value
// and a boolean to check if the value has been set.
func (o *RootServer) GetLastSuccessfulImportOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastSuccessfulImport, true
}

// SetLastSuccessfulImport sets field value
func (o *RootServer) SetLastSuccessfulImport(v time.Time) {
	o.LastSuccessfulImport = v
}

// GetId returns the Id field value
func (o *RootServer) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *RootServer) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *RootServer) SetId(v int32) {
	o.Id = v
}

func (o RootServer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RootServer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["sourceId"] = o.SourceId
	toSerialize["name"] = o.Name
	toSerialize["url"] = o.Url
	if !IsNil(o.Statistics) {
		toSerialize["statistics"] = o.Statistics
	}
	if !IsNil(o.ServerInfo) {
		toSerialize["serverInfo"] = o.ServerInfo
	}
	toSerialize["lastSuccessfulImport"] = o.LastSuccessfulImport
	toSerialize["id"] = o.Id
	return toSerialize, nil
}

func (o *RootServer) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sourceId",
		"name",
		"url",
		"lastSuccessfulImport",
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRootServer := _RootServer{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRootServer)

	if err != nil {
		return err
	}

	*o = RootServer(varRootServer)

	return err
}

type NullableRootServer struct {
	value *RootServer
	isSet bool
}

func (v NullableRootServer) Get() *RootServer {
	return v.value
}

func (v *NullableRootServer) Set(val *RootServer) {
	v.value = val
	v.isSet = true
}

func (v NullableRootServer) IsSet() bool {
	return v.isSet
}

func (v *NullableRootServer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRootServer(val *RootServer) *NullableRootServer {
	return &NullableRootServer{value: val, isSet: true}
}

func (v NullableRootServer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRootServer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


