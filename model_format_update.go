/*
BMLT

BMLT Admin API Documentation

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bmlt

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FormatUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FormatUpdate{}

// FormatUpdate struct for FormatUpdate
type FormatUpdate struct {
	WorldId *string `json:"worldId,omitempty"`
	Type *string `json:"type,omitempty"`
	Translations []FormatTranslation `json:"translations"`
}

type _FormatUpdate FormatUpdate

// NewFormatUpdate instantiates a new FormatUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFormatUpdate(translations []FormatTranslation) *FormatUpdate {
	this := FormatUpdate{}
	this.Translations = translations
	return &this
}

// NewFormatUpdateWithDefaults instantiates a new FormatUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFormatUpdateWithDefaults() *FormatUpdate {
	this := FormatUpdate{}
	return &this
}

// GetWorldId returns the WorldId field value if set, zero value otherwise.
func (o *FormatUpdate) GetWorldId() string {
	if o == nil || IsNil(o.WorldId) {
		var ret string
		return ret
	}
	return *o.WorldId
}

// GetWorldIdOk returns a tuple with the WorldId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormatUpdate) GetWorldIdOk() (*string, bool) {
	if o == nil || IsNil(o.WorldId) {
		return nil, false
	}
	return o.WorldId, true
}

// HasWorldId returns a boolean if a field has been set.
func (o *FormatUpdate) HasWorldId() bool {
	if o != nil && !IsNil(o.WorldId) {
		return true
	}

	return false
}

// SetWorldId gets a reference to the given string and assigns it to the WorldId field.
func (o *FormatUpdate) SetWorldId(v string) {
	o.WorldId = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *FormatUpdate) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormatUpdate) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *FormatUpdate) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *FormatUpdate) SetType(v string) {
	o.Type = &v
}

// GetTranslations returns the Translations field value
func (o *FormatUpdate) GetTranslations() []FormatTranslation {
	if o == nil {
		var ret []FormatTranslation
		return ret
	}

	return o.Translations
}

// GetTranslationsOk returns a tuple with the Translations field value
// and a boolean to check if the value has been set.
func (o *FormatUpdate) GetTranslationsOk() ([]FormatTranslation, bool) {
	if o == nil {
		return nil, false
	}
	return o.Translations, true
}

// SetTranslations sets field value
func (o *FormatUpdate) SetTranslations(v []FormatTranslation) {
	o.Translations = v
}

func (o FormatUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FormatUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.WorldId) {
		toSerialize["worldId"] = o.WorldId
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	toSerialize["translations"] = o.Translations
	return toSerialize, nil
}

func (o *FormatUpdate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"translations",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFormatUpdate := _FormatUpdate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFormatUpdate)

	if err != nil {
		return err
	}

	*o = FormatUpdate(varFormatUpdate)

	return err
}

type NullableFormatUpdate struct {
	value *FormatUpdate
	isSet bool
}

func (v NullableFormatUpdate) Get() *FormatUpdate {
	return v.value
}

func (v *NullableFormatUpdate) Set(val *FormatUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableFormatUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableFormatUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFormatUpdate(val *FormatUpdate) *NullableFormatUpdate {
	return &NullableFormatUpdate{value: val, isSet: true}
}

func (v NullableFormatUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFormatUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


