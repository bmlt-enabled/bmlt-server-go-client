/*
BMLT

BMLT Admin API Documentation

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bmlt

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RootServerBaseStatisticsMeetings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RootServerBaseStatisticsMeetings{}

// RootServerBaseStatisticsMeetings struct for RootServerBaseStatisticsMeetings
type RootServerBaseStatisticsMeetings struct {
	NumTotal int32 `json:"numTotal"`
	NumInPerson int32 `json:"numInPerson"`
	NumVirtual int32 `json:"numVirtual"`
	NumHybrid int32 `json:"numHybrid"`
	NumUnknown int32 `json:"numUnknown"`
}

type _RootServerBaseStatisticsMeetings RootServerBaseStatisticsMeetings

// NewRootServerBaseStatisticsMeetings instantiates a new RootServerBaseStatisticsMeetings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRootServerBaseStatisticsMeetings(numTotal int32, numInPerson int32, numVirtual int32, numHybrid int32, numUnknown int32) *RootServerBaseStatisticsMeetings {
	this := RootServerBaseStatisticsMeetings{}
	this.NumTotal = numTotal
	this.NumInPerson = numInPerson
	this.NumVirtual = numVirtual
	this.NumHybrid = numHybrid
	this.NumUnknown = numUnknown
	return &this
}

// NewRootServerBaseStatisticsMeetingsWithDefaults instantiates a new RootServerBaseStatisticsMeetings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRootServerBaseStatisticsMeetingsWithDefaults() *RootServerBaseStatisticsMeetings {
	this := RootServerBaseStatisticsMeetings{}
	return &this
}

// GetNumTotal returns the NumTotal field value
func (o *RootServerBaseStatisticsMeetings) GetNumTotal() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NumTotal
}

// GetNumTotalOk returns a tuple with the NumTotal field value
// and a boolean to check if the value has been set.
func (o *RootServerBaseStatisticsMeetings) GetNumTotalOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumTotal, true
}

// SetNumTotal sets field value
func (o *RootServerBaseStatisticsMeetings) SetNumTotal(v int32) {
	o.NumTotal = v
}

// GetNumInPerson returns the NumInPerson field value
func (o *RootServerBaseStatisticsMeetings) GetNumInPerson() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NumInPerson
}

// GetNumInPersonOk returns a tuple with the NumInPerson field value
// and a boolean to check if the value has been set.
func (o *RootServerBaseStatisticsMeetings) GetNumInPersonOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumInPerson, true
}

// SetNumInPerson sets field value
func (o *RootServerBaseStatisticsMeetings) SetNumInPerson(v int32) {
	o.NumInPerson = v
}

// GetNumVirtual returns the NumVirtual field value
func (o *RootServerBaseStatisticsMeetings) GetNumVirtual() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NumVirtual
}

// GetNumVirtualOk returns a tuple with the NumVirtual field value
// and a boolean to check if the value has been set.
func (o *RootServerBaseStatisticsMeetings) GetNumVirtualOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumVirtual, true
}

// SetNumVirtual sets field value
func (o *RootServerBaseStatisticsMeetings) SetNumVirtual(v int32) {
	o.NumVirtual = v
}

// GetNumHybrid returns the NumHybrid field value
func (o *RootServerBaseStatisticsMeetings) GetNumHybrid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NumHybrid
}

// GetNumHybridOk returns a tuple with the NumHybrid field value
// and a boolean to check if the value has been set.
func (o *RootServerBaseStatisticsMeetings) GetNumHybridOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumHybrid, true
}

// SetNumHybrid sets field value
func (o *RootServerBaseStatisticsMeetings) SetNumHybrid(v int32) {
	o.NumHybrid = v
}

// GetNumUnknown returns the NumUnknown field value
func (o *RootServerBaseStatisticsMeetings) GetNumUnknown() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NumUnknown
}

// GetNumUnknownOk returns a tuple with the NumUnknown field value
// and a boolean to check if the value has been set.
func (o *RootServerBaseStatisticsMeetings) GetNumUnknownOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumUnknown, true
}

// SetNumUnknown sets field value
func (o *RootServerBaseStatisticsMeetings) SetNumUnknown(v int32) {
	o.NumUnknown = v
}

func (o RootServerBaseStatisticsMeetings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RootServerBaseStatisticsMeetings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["numTotal"] = o.NumTotal
	toSerialize["numInPerson"] = o.NumInPerson
	toSerialize["numVirtual"] = o.NumVirtual
	toSerialize["numHybrid"] = o.NumHybrid
	toSerialize["numUnknown"] = o.NumUnknown
	return toSerialize, nil
}

func (o *RootServerBaseStatisticsMeetings) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"numTotal",
		"numInPerson",
		"numVirtual",
		"numHybrid",
		"numUnknown",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRootServerBaseStatisticsMeetings := _RootServerBaseStatisticsMeetings{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRootServerBaseStatisticsMeetings)

	if err != nil {
		return err
	}

	*o = RootServerBaseStatisticsMeetings(varRootServerBaseStatisticsMeetings)

	return err
}

type NullableRootServerBaseStatisticsMeetings struct {
	value *RootServerBaseStatisticsMeetings
	isSet bool
}

func (v NullableRootServerBaseStatisticsMeetings) Get() *RootServerBaseStatisticsMeetings {
	return v.value
}

func (v *NullableRootServerBaseStatisticsMeetings) Set(val *RootServerBaseStatisticsMeetings) {
	v.value = val
	v.isSet = true
}

func (v NullableRootServerBaseStatisticsMeetings) IsSet() bool {
	return v.isSet
}

func (v *NullableRootServerBaseStatisticsMeetings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRootServerBaseStatisticsMeetings(val *RootServerBaseStatisticsMeetings) *NullableRootServerBaseStatisticsMeetings {
	return &NullableRootServerBaseStatisticsMeetings{value: val, isSet: true}
}

func (v NullableRootServerBaseStatisticsMeetings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRootServerBaseStatisticsMeetings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


