/*
BMLT

BMLT Admin API Documentation

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bmlt

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RootServerBaseStatistics type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RootServerBaseStatistics{}

// RootServerBaseStatistics struct for RootServerBaseStatistics
type RootServerBaseStatistics struct {
	ServiceBodies RootServerBaseStatisticsServiceBodies `json:"serviceBodies"`
	Meetings RootServerBaseStatisticsMeetings `json:"meetings"`
}

type _RootServerBaseStatistics RootServerBaseStatistics

// NewRootServerBaseStatistics instantiates a new RootServerBaseStatistics object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRootServerBaseStatistics(serviceBodies RootServerBaseStatisticsServiceBodies, meetings RootServerBaseStatisticsMeetings) *RootServerBaseStatistics {
	this := RootServerBaseStatistics{}
	this.ServiceBodies = serviceBodies
	this.Meetings = meetings
	return &this
}

// NewRootServerBaseStatisticsWithDefaults instantiates a new RootServerBaseStatistics object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRootServerBaseStatisticsWithDefaults() *RootServerBaseStatistics {
	this := RootServerBaseStatistics{}
	return &this
}

// GetServiceBodies returns the ServiceBodies field value
func (o *RootServerBaseStatistics) GetServiceBodies() RootServerBaseStatisticsServiceBodies {
	if o == nil {
		var ret RootServerBaseStatisticsServiceBodies
		return ret
	}

	return o.ServiceBodies
}

// GetServiceBodiesOk returns a tuple with the ServiceBodies field value
// and a boolean to check if the value has been set.
func (o *RootServerBaseStatistics) GetServiceBodiesOk() (*RootServerBaseStatisticsServiceBodies, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceBodies, true
}

// SetServiceBodies sets field value
func (o *RootServerBaseStatistics) SetServiceBodies(v RootServerBaseStatisticsServiceBodies) {
	o.ServiceBodies = v
}

// GetMeetings returns the Meetings field value
func (o *RootServerBaseStatistics) GetMeetings() RootServerBaseStatisticsMeetings {
	if o == nil {
		var ret RootServerBaseStatisticsMeetings
		return ret
	}

	return o.Meetings
}

// GetMeetingsOk returns a tuple with the Meetings field value
// and a boolean to check if the value has been set.
func (o *RootServerBaseStatistics) GetMeetingsOk() (*RootServerBaseStatisticsMeetings, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Meetings, true
}

// SetMeetings sets field value
func (o *RootServerBaseStatistics) SetMeetings(v RootServerBaseStatisticsMeetings) {
	o.Meetings = v
}

func (o RootServerBaseStatistics) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RootServerBaseStatistics) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["serviceBodies"] = o.ServiceBodies
	toSerialize["meetings"] = o.Meetings
	return toSerialize, nil
}

func (o *RootServerBaseStatistics) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"serviceBodies",
		"meetings",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRootServerBaseStatistics := _RootServerBaseStatistics{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRootServerBaseStatistics)

	if err != nil {
		return err
	}

	*o = RootServerBaseStatistics(varRootServerBaseStatistics)

	return err
}

type NullableRootServerBaseStatistics struct {
	value *RootServerBaseStatistics
	isSet bool
}

func (v NullableRootServerBaseStatistics) Get() *RootServerBaseStatistics {
	return v.value
}

func (v *NullableRootServerBaseStatistics) Set(val *RootServerBaseStatistics) {
	v.value = val
	v.isSet = true
}

func (v NullableRootServerBaseStatistics) IsSet() bool {
	return v.isSet
}

func (v *NullableRootServerBaseStatistics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRootServerBaseStatistics(val *RootServerBaseStatistics) *NullableRootServerBaseStatistics {
	return &NullableRootServerBaseStatistics{value: val, isSet: true}
}

func (v NullableRootServerBaseStatistics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRootServerBaseStatistics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


